    include "lib/math.z80"
    include "game_state.z80"
    include "graphics.z80"
    include "screen.z80"

Remove_Food:
  DEC H ; The stalk is above the apple
  PUSH HL
  CALL Game_get_address
  LD A, (HL)
  CP A, Game_tile_food_stalk
  POP HL
  JR NZ, Remove_Food_Exit ; The stalk was replaced by something (snake), exit

    ; Remove the food tile from the game state
  PUSH HL
  CALL Game_get_address
  LD A, Game_tile_empty
  LD (HL), A
  POP HL

    ; Remove the food from the screen
  CALL Graphics_Clear_Box

Remove_Food_Exit:
  RET

; Finds a random X, Y position that is within the screen.
; Once found, places the food there, both in the game state and on-screen.
Place_Food:
  CALL RND16 ; H is Y position, L is X position from now on.

    ; The X value can be 0-31, so it suffices to mask it.
  LD A, L
  AND 32 - 1
  LD L, A

    ; The Y value can be 0-22 (1 row of score). We mask it first, so it's
    ; in the interval 0-31.
  LD A, H
  AND 32 - 1
  CP 23 - Game_scores_height
  JP S, Place_Food_y_ok:
  RR A ;  It's greater than 22, divide in half. Now we know it's o.k.
Place_Food_y_ok:
  ADD Game_scores_height
  LD H, A

  LD BC, HL

    ; Check if the position is free.
  CALL Game_get_address
  LD A, (HL)
  CP A, Game_tile_empty
  JR NZ, Place_Food ; Space occupied, regenerate

    ; We found a free space, place the food
  LD (HL), Game_tile_food

  LD HL, BC

    ; Place the graphic on screen
  PUSH HL

  ; Generate a random even number in the range 0 <= n <= 2.
  ; LD A, R
  ; AND A, 0x1
  ; RL A

  LD A, 2

  CALL Draw_Food
  POP HL

    ; Try to place and draw the stalk
  DEC H
  LD BC, HL
  CALL Game_get_address
  LD A, (HL)
  CP A, Game_tile_empty
  JR NZ, Place_Food_Done
    ; There's a free slot to place the stalk
  LD A, Game_tile_food_stalk
  LD (HL), A
  LD HL, BC

  LD A, 2
  CALL Draw_Stalk
  RET
Place_Food_Done:

  RET
