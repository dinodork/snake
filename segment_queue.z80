; The snake itself is implemented as queue of segments that lives inside a
; circular buffer. There can be at most 24 - 3 (top and bottom walls + score)
; times 32 - 2 (side walls) segments before game over, so that's the size of
; the buffer.
; Each segment is one byte, where
; Bit 0-3: The direction this segment is facing
; Bit 4-8: The direction the previous segment is found.
; For example, for this snake
;
;        -\
;         V
;
; The head is facing down, and the segment above it is found in the upwards
; direction. The first body segment is facing down, while the previous segment
; is found to the left. The tail is facing right, and has no segment following
; it, so it doesn't matter what we set it to.
;
; Hence the queue consists of
; {Facing_right, Facing_down | Follower_left, Facing_down | Follower_up}
;
; The head has the special case that its follower is in the opposite direction
; it's facing, while the tail has the special case that it has no follower,
; by definition.
Segment_Queue_buffer_size: EQU (24 - 2) * (32 - 2)

Segment_Queue_buffer:
    DEFS Segment_Queue_buffer_size

; The index of the head in the segment queue buffer
Segment_Queue_end_index:
    DEFS 0x2

; The index of the tails in the segment queue buffer
Segment_Queue_front_index:
    DEFS 0x2

; Initializes the queue. Initially, the queue consists of
; 0: tail
; 1: body segment
; 2: head
Segment_Queue_initialise:
	LD IX, Segment_Queue_end_index
    LD (IX), 0

	LD IX, Segment_Queue_front_index
    LD (IX), 0

    RET

; HL: The address of the first element
Segment_Queue_get_front:
    LD DE, (Segment_Queue_front_index)
    LD HL, Segment_Queue_buffer
    ADD HL, DE
    RET

; Pops the first element off the queue and returns it in A
Segment_Queue_pop_front:
    CALL Segment_Queue_get_front
    LD A, (HL)
    PUSH AF
    LD HL, (Segment_Queue_front_index)
    CALL Segment_Queue_get_next_index
    LD (Segment_Queue_front_index), HL
    POP AF
    RET

Segment_Queue_get_next_index:
    INC HL
    PUSH HL
    LD DE, Segment_Queue_buffer_size
    SBC HL, BC
    POP HL
    RET NZ
    LD HL, 0
    RET


; Returns address of the last element.
;   HL: The address of the last element
Segment_Queue_get_back:
    LD IX, Segment_Queue_end_index
    LD E, (IX)
    DEC E
    LD D, 0
    LD HL, Segment_Queue_buffer
    ADD HL, DE
    RET

; HL: The address after the last element
Segment_Queue_get_end:
    LD HL, Segment_Queue_buffer
    LD BC, (Segment_Queue_end_index)
    ADD HL, BC
    RET


; Adds an element to the end of the queue.
; If the queue is full the effect is undefined.
; A: the element to push
Segment_Queue_push_back:
    LD HL, (Segment_Queue_end_index)
    LD DE, HL
    LD BC, Segment_Queue_buffer
    ADD HL, BC
    LD (HL), A

    LD BC, Segment_Queue_buffer + Segment_Queue_buffer_size
    ; If the new head index is outside the buffer,
    ; set it to 0
    SBC HL, BC
    JR NZ, Nowrap
    LD DE, 0
    JP Wrap
Nowrap:
    INC DE
Wrap:
    LD (Segment_Queue_end_index), DE
    RET

; HL: Length of the queue
Segment_Queue_get_length:
    LD HL, (Segment_Queue_end_index)
    LD DE, (Segment_Queue_front_index)
    SBC HL, DE

    RET NC ; No carry, we're done.

    ; head index < tail index
    LD BC, Segment_Queue_buffer_size
    ADD HL, BC
    RET

; The next index in the queue
; HL current address
; Returns address of the next element in HL
Segment_Queue_get_next:
    INC HL
    LD BC, HL
    LD DE, Segment_Queue_buffer + Segment_Queue_buffer_size
    SBC HL, DE

    JR C, Segment_Queue_next_index_nowrap
    LD HL, 0
    RET
Segment_Queue_next_index_nowrap:
    LD HL, BC
    RET
